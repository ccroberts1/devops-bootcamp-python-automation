#!/user/bin/env groovy

pipeline {
    agent any
    environment {
        ECR_REPO_NAME = 'devops/python-automation'
        EC2_SERVER = '98.81.243.117'
        EC2_USER = 'ec2-user'

        SSH_KEY_FILE = credentials('ssh-creds')

        ECR_REGISTRY = '538343889439.dkr.ecr.us-east-1.amazonaws.com/devops/python-automation'
        DOCKER_USER = 'AWS'
        DOCKER_PWD = credentials('ecr-repo-pwd')
        CONTAINER_PORT = '3000'
        HOST_PORT = '3000'

        AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
        AWS_DEFAULT_REGION = 'us-east-1'
    }
    stages {
        stage("select image version") {
            steps {
                script {
                    echo 'fetching available image versions'
                    def result = sh(script: 'python3 jenkins/get-images.py', returnStdout: true).trim()
                    def tags = result.split('\n') as List
                    version_to_deploy = input message: 'Select version to deploy', ok: 'Deploy', parameters: [choice(name: 'Select version', choices: tags)]
                    env.DOCKER_IMAGE = "${ECR_REGISTRY}/${ECR_REPO_NAME}:${version_to_deploy}"
                    echo env.DOCKER_IMAGE
                }
            }
        }
        stage("deploying image") {
            steps {
                script {
                    echo 'deploying docker image to EC2...'
                    def result = sh(script: 'python3 jenkins/deploy.py', returnStdout: true).trim()
                    echo result
                }
            }
        }
        stage("validate deployment") {
            steps {
                script {
                   echo 'validating application was deployed successfully...'
                   def result = sh(script: 'python3 jenkins/validate.py', returnStdout: true).trim()
                   echo result
                }
            }
        }
    }
}